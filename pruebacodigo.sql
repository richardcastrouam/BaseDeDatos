/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 13.5 		*/
/*  Created On : 18-sep.-2025 16:14:45 				*/
/*  DBMS       : SQL Server 2012 						*/
/* ---------------------------------------------------- */

/* Drop Foreign Key Constraints */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_detalle_pedidos_Tb_MenuPlatos]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_detalle_pedidos] DROP CONSTRAINT [FK_Tb_detalle_pedidos_Tb_MenuPlatos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_detalle_pedidos_Tb_Pedidos]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_detalle_pedidos] DROP CONSTRAINT [FK_Tb_detalle_pedidos_Tb_Pedidos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_facturas_Tb_Pedidos]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_facturas] DROP CONSTRAINT [FK_Tb_facturas_Tb_Pedidos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_inventario_Tb_proveedores]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_inventario] DROP CONSTRAINT [FK_Tb_inventario_Tb_proveedores]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_Pedidos_Tb_clientes ]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_Pedidos] DROP CONSTRAINT [FK_Tb_Pedidos_Tb_clientes ]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_Pedidos_Tb_empleados]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_Pedidos] DROP CONSTRAINT [FK_Tb_Pedidos_Tb_empleados]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_Pedidos_Tb_mesas]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_Pedidos] DROP CONSTRAINT [FK_Tb_Pedidos_Tb_mesas]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_reservas_Tb_clientes ]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_reservas] DROP CONSTRAINT [FK_Tb_reservas_Tb_clientes ]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_reservas_Tb_mesas]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_reservas] DROP CONSTRAINT [FK_Tb_reservas_Tb_mesas]
GO

/* Drop Views */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[View1]') AND OBJECTPROPERTY(id, N'IsView') = 1) 
DROP VIEW [View1]
GO

/* Drop Tables */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_clientes ]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_clientes ]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_detalle_pedidos]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_detalle_pedidos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_empleados]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_empleados]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_facturas]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_facturas]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_inventario]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_inventario]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_MenuPlatos]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_MenuPlatos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_mesas]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_mesas]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_Pedidos]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_Pedidos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_proveedores]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_proveedores]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_reservas]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_reservas]
GO

/* Create Tables */

CREATE TABLE [Tb_clientes ]
(
	[idClientes] int NOT NULL,
	[nombre] varchar(100) NOT NULL,    -- Nombre del cliente.
	[apellido] varchar(100) NOT NULL,    -- Apellido del cliente.
	[telefono] varchar(20) NULL,    -- Teléfono de contacto del cliente.
	[email] varchar(100) NULL,    -- Correo electrónico del cliente.
	[direccion] varchar(200) NULL    -- Dirección del cliente.
)
GO

CREATE TABLE [Tb_detalle_pedidos]
(
	[idDetalle] int NOT NULL,
	[idPedido] int NOT NULL,    -- Referencia al pedido principal.
	[idPlato] int NOT NULL,    -- Referencia al plato solicitado.
	[cantidad] int NOT NULL,    -- Número de unidades del plato pedido.
	[precioUnitario] decimal(10,2) NOT NULL,    -- Precio por unidad del plato.
	[subTotal] decimal(10,2) NULL,    -- Total parcial de este detalle cantidad × precioUnitario.
	[idPedidos] int NULL    -- Redundancia de referencia al pedido (puede estar vacía).
)
GO

CREATE TABLE [Tb_empleados]
(
	[idEmpleado] int NOT NULL,
	[nombre] varchar(100) NOT NULL,    -- Nombre del empleado.
	[apellido] varchar(100) NOT NULL,    -- Apellido del empleado.
	[cargo] varchar(50) NOT NULL,    -- Puesto que ocupa el empleado ejemplo: mesero, cocinero, cajero.
	[telefono] varchar(20) NULL,    -- Número telefónico del empleado.
	[email] varchar(100) NULL,    -- Correo electrónico del empleado.
	[fecha_contratacion] date NULL,    -- Fecha en que fue contratado.
	[activo] tinyint NOT NULL    -- Estado del empleado (1=Activo, 0=Inactivo).
)
GO

CREATE TABLE [Tb_facturas]
(
	[idFactura] int NOT NULL,
	[fecha] datetime NOT NULL,    -- Fecha y hora de emisión de la factura.
	[idPedido] int NOT NULL,    -- Pedido asociado a la factura.
	[subtotal] decimal(10,2) NOT NULL,    -- Suma total antes de impuestos.
	[impuestos] decimal(10,2) NOT NULL,    -- Valor de impuestos aplicados.
	[total] decimal(10,2) NOT NULL,    -- Monto total de la factura (subtotal + impuestos).
	[metodo_pago] varchar(50) NULL,    -- Forma de pago utilizada (efectivo, tarjeta, transferencia, etc.).
	[idPedidos] int NULL    -- Redundancia de referencia al pedido.
)
GO

CREATE TABLE [Tb_inventario]
(
	[idProducto] int NOT NULL,
	[nombreProducto] varchar(150) NOT NULL,    -- Nombre del producto o insumo.
	[cantidad] int NOT NULL,    -- Cantidad disponible en inventario.
	[precioUnitario] decimal(10,2) NOT NULL,    -- Precio unitario del producto.
	[idProveedor] int NULL,    -- Proveedor asociado al producto.
	[minimo_reposicion] int NULL    -- Cantidad mínima antes de solicitar reposición.
)
GO

CREATE TABLE [Tb_MenuPlatos]
(
	[idPlato] int NOT NULL,    -- Identificador unico de cada plato.
	[nombrePlato] varchar(150) NOT NULL,    -- Nombre del plato que se ofrece en el menu.
	[descripcion] varchar(255) NULL,    -- Breve descripcion o ingrediente del plato
	[precio] decimal(10,2) NOT NULL,    -- Precio de venta del plato.
	[categoria] varchar(50) NULL,    -- Categoria del plato.
	[disponible] tinyint NOT NULL    -- Indica si el plato esta disponible para la venta.
)
GO

CREATE TABLE [Tb_mesas]
(
	[idMesa] int NOT NULL,
	[numeroMesa] int NOT NULL,    -- Número asignado a la mesa.
	[capacidad] int NOT NULL,    -- Número de personas que pueden sentarse en la mesa.
	[estado] varchar(20) NOT NULL    -- Estado actual de la mesa (ejemplo: libre, ocupada, reservada).
)
GO

CREATE TABLE [Tb_Pedidos]
(
	[idPedidos] int NOT NULL,    -- Identificador unico del pedido.
	[fecha] datetime NOT NULL,    -- Fecha y hora en que se realizó el pedido.
	[idEmpleado] int NOT NULL,    -- Referencia al empleado que atendió el pedido.
	[idMesa] int NOT NULL,    -- Número de mesa donde se hizo el pedido.
	[estado] varchar(20) NOT NULL,    -- Estado del pedido. Ejemplo: pendiente, en proceso, entregado, cancelado.
	[idClientes] int NOT NULL    -- Cliente que realizo el pedido.
)
GO

CREATE TABLE [Tb_proveedores]
(
	[idProveedor] int NOT NULL,
	[nombre] varchar(150) NOT NULL,
	[contacto] varchar(100) NULL,
	[telefono] varchar(20) NULL,
	[email] varchar(100) NULL
)
GO

CREATE TABLE [Tb_reservas]
(
	[idReserva] int NOT NULL,    -- Identificador único de la reserva.
	[idCliente] int NOT NULL,    -- Cliente que realiza la reserva.
	[idMesa] int NOT NULL,    -- Mesa reservada.
	[fecha] date NOT NULL,    -- Fecha de la reserva.
	[hora] time NOT NULL,    -- Hora de la reserva.
	[numPersonas] int NOT NULL,    -- Cantidad de personas que ocuparán la mesa.
	[estado] varchar(20) NOT NULL,    -- Estado de la reserva (ejemplo: activa, cumplida, cancelada).
	[idClientes] int NULL    -- Redundancia de referencia al cliente.
)
GO

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE [Tb_clientes ] 
 ADD CONSTRAINT [PK_Tb_clientes ]
	PRIMARY KEY CLUSTERED ([idClientes] ASC)
GO

ALTER TABLE [Tb_detalle_pedidos] 
 ADD CONSTRAINT [PK_Tb_detalle_pedidos]
	PRIMARY KEY CLUSTERED ([idDetalle] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_detalle_pedidos_Tb_MenuPlatos] 
 ON [Tb_detalle_pedidos] ([idPlato] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_detalle_pedidos_Tb_Pedidos] 
 ON [Tb_detalle_pedidos] ([idPedidos] ASC)
GO

ALTER TABLE [Tb_empleados] 
 ADD CONSTRAINT [PK_Tb_empleados]
	PRIMARY KEY CLUSTERED ([idEmpleado] ASC)
GO

ALTER TABLE [Tb_facturas] 
 ADD CONSTRAINT [PK_Tb_facturas]
	PRIMARY KEY CLUSTERED ([idFactura] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_facturas_Tb_Pedidos] 
 ON [Tb_facturas] ([idPedidos] ASC)
GO

ALTER TABLE [Tb_inventario] 
 ADD CONSTRAINT [PK_Tb_inventario]
	PRIMARY KEY CLUSTERED ([idProducto] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_inventario_Tb_proveedores] 
 ON [Tb_inventario] ([idProveedor] ASC)
GO

ALTER TABLE [Tb_MenuPlatos] 
 ADD CONSTRAINT [PK_Tb_MenuPlatos]
	PRIMARY KEY CLUSTERED ([idPlato] ASC)
GO

ALTER TABLE [Tb_mesas] 
 ADD CONSTRAINT [PK_Tb_mesas]
	PRIMARY KEY CLUSTERED ([idMesa] ASC)
GO

ALTER TABLE [Tb_Pedidos] 
 ADD CONSTRAINT [PK_menuPlatos]
	PRIMARY KEY CLUSTERED ([idPedidos] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_Pedidos_Tb_clientes ] 
 ON [Tb_Pedidos] ([idClientes] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_Pedidos_Tb_empleados] 
 ON [Tb_Pedidos] ([idEmpleado] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_Pedidos_Tb_mesas] 
 ON [Tb_Pedidos] ([idMesa] ASC)
GO

ALTER TABLE [Tb_proveedores] 
 ADD CONSTRAINT [PK_Tb_proveedores]
	PRIMARY KEY CLUSTERED ([idProveedor] ASC)
GO

ALTER TABLE [Tb_reservas] 
 ADD CONSTRAINT [PK_Tb_reservas]
	PRIMARY KEY CLUSTERED ([idReserva] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_reservas_Tb_clientes ] 
 ON [Tb_reservas] ([idClientes] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_reservas_Tb_mesas] 
 ON [Tb_reservas] ([idMesa] ASC)
GO

/* Create Foreign Key Constraints */

ALTER TABLE [Tb_detalle_pedidos] ADD CONSTRAINT [FK_Tb_detalle_pedidos_Tb_MenuPlatos]
	FOREIGN KEY ([idPlato]) REFERENCES [Tb_MenuPlatos] ([idPlato]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_detalle_pedidos] ADD CONSTRAINT [FK_Tb_detalle_pedidos_Tb_Pedidos]
	FOREIGN KEY ([idPedidos]) REFERENCES [Tb_Pedidos] ([idPedidos]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_facturas] ADD CONSTRAINT [FK_Tb_facturas_Tb_Pedidos]
	FOREIGN KEY ([idPedidos]) REFERENCES [Tb_Pedidos] ([idPedidos]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_inventario] ADD CONSTRAINT [FK_Tb_inventario_Tb_proveedores]
	FOREIGN KEY ([idProveedor]) REFERENCES [Tb_proveedores] ([idProveedor]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_Pedidos] ADD CONSTRAINT [FK_Tb_Pedidos_Tb_clientes ]
	FOREIGN KEY ([idClientes]) REFERENCES [Tb_clientes ] ([idClientes]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_Pedidos] ADD CONSTRAINT [FK_Tb_Pedidos_Tb_empleados]
	FOREIGN KEY ([idEmpleado]) REFERENCES [Tb_empleados] ([idEmpleado]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_Pedidos] ADD CONSTRAINT [FK_Tb_Pedidos_Tb_mesas]
	FOREIGN KEY ([idMesa]) REFERENCES [Tb_mesas] ([idMesa]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_reservas] ADD CONSTRAINT [FK_Tb_reservas_Tb_clientes ]
	FOREIGN KEY ([idClientes]) REFERENCES [Tb_clientes ] ([idClientes]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_reservas] ADD CONSTRAINT [FK_Tb_reservas_Tb_mesas]
	FOREIGN KEY ([idMesa]) REFERENCES [Tb_mesas] ([idMesa]) ON DELETE No Action ON UPDATE No Action
GO

/* Create Table Comments */


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_clientes ', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Almacena la información básica de los clientes que consumen en el restaurante.', 'SCHEMA', 'dbo', 'table', 'Tb_clientes ' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Almacena la información básica de los clientes que consumen en el restaurante.', 'SCHEMA', 'dbo', 'table', 'Tb_clientes ' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Nombre del cliente.', 'Schema', [dbo], 'table', [Tb_clientes ], 'column', [nombre]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Apellido del cliente.', 'Schema', [dbo], 'table', [Tb_clientes ], 'column', [apellido]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Teléfono de contacto del cliente.', 'Schema', [dbo], 'table', [Tb_clientes ], 'column', [telefono]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Correo electrónico del cliente.', 'Schema', [dbo], 'table', [Tb_clientes ], 'column', [email]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Dirección del cliente.', 'Schema', [dbo], 'table', [Tb_clientes ], 'column', [direccion]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_detalle_pedidos', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Especifica los platos que conforman cada pedido y su detalle.', 'SCHEMA', 'dbo', 'table', 'Tb_detalle_pedidos' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Especifica los platos que conforman cada pedido y su detalle.', 'SCHEMA', 'dbo', 'table', 'Tb_detalle_pedidos' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Referencia al pedido principal.', 'Schema', [dbo], 'table', [Tb_detalle_pedidos], 'column', [idPedido]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Referencia al plato solicitado.', 'Schema', [dbo], 'table', [Tb_detalle_pedidos], 'column', [idPlato]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Número de unidades del plato pedido.', 'Schema', [dbo], 'table', [Tb_detalle_pedidos], 'column', [cantidad]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Precio por unidad del plato.', 'Schema', [dbo], 'table', [Tb_detalle_pedidos], 'column', [precioUnitario]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Total parcial de este detalle cantidad × precioUnitario.', 'Schema', [dbo], 'table', [Tb_detalle_pedidos], 'column', [subTotal]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Redundancia de referencia al pedido (puede estar vacía).', 'Schema', [dbo], 'table', [Tb_detalle_pedidos], 'column', [idPedidos]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_empleados', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Contiene la informacion de los empleados que trabajan en el restaurante.', 'SCHEMA', 'dbo', 'table', 'Tb_empleados' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Contiene la informacion de los empleados que trabajan en el restaurante.', 'SCHEMA', 'dbo', 'table', 'Tb_empleados' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Nombre del empleado.', 'Schema', [dbo], 'table', [Tb_empleados], 'column', [nombre]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Apellido del empleado.', 'Schema', [dbo], 'table', [Tb_empleados], 'column', [apellido]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Puesto que ocupa el empleado ejemplo: mesero, cocinero, cajero.', 'Schema', [dbo], 'table', [Tb_empleados], 'column', [cargo]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Número telefónico del empleado.', 'Schema', [dbo], 'table', [Tb_empleados], 'column', [telefono]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Correo electrónico del empleado.', 'Schema', [dbo], 'table', [Tb_empleados], 'column', [email]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Fecha en que fue contratado.', 'Schema', [dbo], 'table', [Tb_empleados], 'column', [fecha_contratacion]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Estado del empleado (1=Activo, 0=Inactivo).', 'Schema', [dbo], 'table', [Tb_empleados], 'column', [activo]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_facturas', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Registra las facturas generadas a partir de los pedidos realizados.', 'SCHEMA', 'dbo', 'table', 'Tb_facturas' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Registra las facturas generadas a partir de los pedidos realizados.', 'SCHEMA', 'dbo', 'table', 'Tb_facturas' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Fecha y hora de emisión de la factura.', 'Schema', [dbo], 'table', [Tb_facturas], 'column', [fecha]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Pedido asociado a la factura.', 'Schema', [dbo], 'table', [Tb_facturas], 'column', [idPedido]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Suma total antes de impuestos.', 'Schema', [dbo], 'table', [Tb_facturas], 'column', [subtotal]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Valor de impuestos aplicados.', 'Schema', [dbo], 'table', [Tb_facturas], 'column', [impuestos]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Monto total de la factura (subtotal + impuestos).', 'Schema', [dbo], 'table', [Tb_facturas], 'column', [total]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Forma de pago utilizada (efectivo, tarjeta, transferencia, etc.).', 'Schema', [dbo], 'table', [Tb_facturas], 'column', [metodo_pago]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Redundancia de referencia al pedido.', 'Schema', [dbo], 'table', [Tb_facturas], 'column', [idPedidos]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_inventario', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Registra los productos en existencia, sus cantidades y costos.', 'SCHEMA', 'dbo', 'table', 'Tb_inventario' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Registra los productos en existencia, sus cantidades y costos.', 'SCHEMA', 'dbo', 'table', 'Tb_inventario' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Nombre del producto o insumo.', 'Schema', [dbo], 'table', [Tb_inventario], 'column', [nombreProducto]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Cantidad disponible en inventario.', 'Schema', [dbo], 'table', [Tb_inventario], 'column', [cantidad]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Precio unitario del producto.', 'Schema', [dbo], 'table', [Tb_inventario], 'column', [precioUnitario]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Proveedor asociado al producto.', 'Schema', [dbo], 'table', [Tb_inventario], 'column', [idProveedor]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Cantidad mínima antes de solicitar reposición.', 'Schema', [dbo], 'table', [Tb_inventario], 'column', [minimo_reposicion]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_MenuPlatos', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Registra todos los platos del menú disponibles en el restaurante, con sus datos principales como nombre, precio y disponibilidad.', 'SCHEMA', 'dbo', 'table', 'Tb_MenuPlatos' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Registra todos los platos del menú disponibles en el restaurante, con sus datos principales como nombre, precio y disponibilidad.', 'SCHEMA', 'dbo', 'table', 'Tb_MenuPlatos' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Identificador unico de cada plato.', 'Schema', [dbo], 'table', [Tb_MenuPlatos], 'column', [idPlato]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Nombre del plato que se ofrece en el menu.', 'Schema', [dbo], 'table', [Tb_MenuPlatos], 'column', [nombrePlato]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Breve descripcion o ingrediente del plato', 'Schema', [dbo], 'table', [Tb_MenuPlatos], 'column', [descripcion]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Precio de venta del plato.', 'Schema', [dbo], 'table', [Tb_MenuPlatos], 'column', [precio]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Categoria del plato.', 'Schema', [dbo], 'table', [Tb_MenuPlatos], 'column', [categoria]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Indica si el plato esta disponible para la venta.', 'Schema', [dbo], 'table', [Tb_MenuPlatos], 'column', [disponible]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_mesas', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Contien la informacion de las mesas del restaurante.', 'SCHEMA', 'dbo', 'table', 'Tb_mesas' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Contien la informacion de las mesas del restaurante.', 'SCHEMA', 'dbo', 'table', 'Tb_mesas' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Número asignado a la mesa.', 'Schema', [dbo], 'table', [Tb_mesas], 'column', [numeroMesa]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Número de personas que pueden sentarse en la mesa.', 'Schema', [dbo], 'table', [Tb_mesas], 'column', [capacidad]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Estado actual de la mesa (ejemplo: libre, ocupada, reservada).', 'Schema', [dbo], 'table', [Tb_mesas], 'column', [estado]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_Pedidos', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Guarda la información de los pedidos realizados por los clientes en el restaurante.', 'SCHEMA', 'dbo', 'table', 'Tb_Pedidos' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Guarda la información de los pedidos realizados por los clientes en el restaurante.', 'SCHEMA', 'dbo', 'table', 'Tb_Pedidos' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Identificador unico del pedido.', 'Schema', [dbo], 'table', [Tb_Pedidos], 'column', [idPedidos]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Fecha y hora en que se realizó el pedido.', 'Schema', [dbo], 'table', [Tb_Pedidos], 'column', [fecha]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Referencia al empleado que atendió el pedido.', 'Schema', [dbo], 'table', [Tb_Pedidos], 'column', [idEmpleado]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Número de mesa donde se hizo el pedido.', 'Schema', [dbo], 'table', [Tb_Pedidos], 'column', [idMesa]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Estado del pedido. Ejemplo: pendiente, en proceso, entregado, cancelado.', 'Schema', [dbo], 'table', [Tb_Pedidos], 'column', [estado]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Cliente que realizo el pedido.', 'Schema', [dbo], 'table', [Tb_Pedidos], 'column', [idClientes]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_reservas', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Almacena las reservas de mesas hechas por los clientes.', 'SCHEMA', 'dbo', 'table', 'Tb_reservas' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Almacena las reservas de mesas hechas por los clientes.', 'SCHEMA', 'dbo', 'table', 'Tb_reservas' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Identificador único de la reserva.', 'Schema', [dbo], 'table', [Tb_reservas], 'column', [idReserva]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Cliente que realiza la reserva.', 'Schema', [dbo], 'table', [Tb_reservas], 'column', [idCliente]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Mesa reservada.', 'Schema', [dbo], 'table', [Tb_reservas], 'column', [idMesa]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Fecha de la reserva.', 'Schema', [dbo], 'table', [Tb_reservas], 'column', [fecha]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Hora de la reserva.', 'Schema', [dbo], 'table', [Tb_reservas], 'column', [hora]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Cantidad de personas que ocuparán la mesa.', 'Schema', [dbo], 'table', [Tb_reservas], 'column', [numPersonas]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Estado de la reserva (ejemplo: activa, cumplida, cancelada).', 'Schema', [dbo], 'table', [Tb_reservas], 'column', [estado]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Redundancia de referencia al cliente.', 'Schema', [dbo], 'table', [Tb_reservas], 'column', [idClientes]
GO

/* Create Views */


GO
